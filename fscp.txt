The FreeLAN Project                                         J. Kauffmann
Draft:                                                   www.freelan.org
Category: Informational                                    14 April 2011

                    The FreeLAN Secure Channel Protocol

Status of this Memo

   This memo provides information for the Internet community.  It does
   not specify an Internet standard of any kind.  Distribution of this
   memo is unlimited.

Abstract

   The FreeLAN peer-to-peer virtual private network specification
   requires a fast and secure communication channel.
   
   The protocol is specialized into peer-to-peer applications and
   supports some well-known NAT traversal techniques.
   
1. Introduction
   
   The FreeLAN peer-to-peer virtual private network specification
   requires a fast and secure communication channel.
   
   The FSCP (FreeLAN Secure Channel Protocol) is designed to be secure
   and efficient, and tries to minimize the overhead. It is based over
   UDP [RFC768].

   The protocol supports packet loss but does not deal with packet
   reordering or duplication.

1.1. Terminology

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [RFC2119].

2. Format

   FSCP uses different message formats. The roles of these messages are
   described in a further section.

   Multi-bytes integer values MUST be written in network byte order.

2.1. Generic message format

   All messages start with a 4 bytes header whose layout is:

                  0      7 8     15 16    23 24    31 
                 +--------+--------+-----------------+
                 |version |  type  |      length     |
                 +--------+--------+-----------------+

   The version MUST be set to the currently used version of the FreeLAN
   Secure Channel Protocol. The current version described in this document
   is 1.

   The type field indicates the type of the message. Its possible values
   are listed in the next sections.
   
   The length field indicates the length of the message body.

2.2. HELLO message format

   A HELLO message is 4 bytes long and has the following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------------------------+
                 |           unique_number           |
                 +-----------------------------------+
 
2.2.1. HELLO message type

   The type value of a HELLO message can be either:
   
     0x00: For a request HELLO message
     0x01: For a response HELLO message

2.2.2. HELLO message fields

   The unique_number field is a 4 bytes value chosen by the sender of a
   HELLO request message.

2.3. PRESENTATION message format

   A PRESENTATION message has the following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |  sig_cert_len   |     sig_cert    |
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |  enc_cert_len   |     enc_cert    |
                 +-----------------+~~~~~~~~~~~~~~~~~+

2.3.1. PRESENTATION message type

   A PRESENTATION message has a type value of 0x02.

2.3.2. PRESENTATION message fields

   The sig_cert_len field indicates the size of the sig_cert field.

   The sig_cert field is a DER-encoded X509 certificate used for message
   signature by the sender. This certificate SHOULD have the
   digitalSignature key usage set, as specified in [RFC2459]. In the
   next sections, its associated RSA public and private keys for
   signature will respectively be referred as PKV and PKS.

   The enc_cert_len field indicates the size of the enc_cert field.

   The enc_cert field is a DER-encoded X509 certificate used for key
   exchange by the sender. This certificate SHOULD have the
   keyEncipherment key usage set, as specified in [RFC2459]. In the next
   sections, its associated RSA public and private keys for encryption
   will respectively be referred as PKE and PKD.

   If the same certificate is to be used for both usages, a sender MAY
   set enc_cert_len to zero and leave enc_cert empty. In this case, the
   certificate SHOULD have both digitalSignature and keyEncipherment key
   usage set, as specified in [RFC2459].

   However, it is RECOMMENDED that two different keys pairs be used for
   signature and encryption. A strict implementation MAY reject
   PRESENTATION messages with identicial signature and encryption
   certificates.

   The sig_cert and enc_cert certificates MUST have the exact same
   subjectName and issuerName. If they don't, the presentation message
   MUST be ignored.

   A host MIGHT ignore any PRESENTATION message whose sig_cert or
   enc_cert field does not satisfy the key usage requirements.

   The minimum RSA key size is 1024 bits. The RECOMMENDED RSA key size
   is 2048 bits or higher, with an exponent of 2^16 + 1. A strict
   implementation MAY reject PRESENTATION messages with a low RSA key
   size.

2.4. SESSION_REQUEST message format

   A SESSION_REQUEST message has the following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------------------------+
                 |          session_number           |
                 +-----------------------------------+

   This header is not sent in clear-text. It is first ciphered using the
   public PKE of the target host, then the ciphertext is signed using
   the sender host signature private key (PKS).

   That is, a SESSION_REQUEST message sent over the wire has the
   following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |      ct_len     |        ct       |
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |    ct_sig_len   |      ct_sig     |
                 +-----------------+~~~~~~~~~~~~~~~~~+

2.4.1. SESSION_REQUEST message type

   A SESSION_REQUEST message has a type value of 0x03.

2.4.2. SESSION_REQUEST message fields

   The session_number indicates the last known identifier of the
   session. If no previous session is known, session_number MUST be 0.

   The ct_len field indicates the length of the ct field.
   
   The ct field is the ciphertext, generated using the public encryption
   key (PKE) of the target host.

   The ct_sig_len field indicates the length of the cts field.

   The ct_sig field is the ciphertext signature, generated using the
   private signature key (PKS) of the sender host.

   A host who receives a SESSION_REQUEST message MUST first check if the
   cts signature matches the sending host public verification key (PKV).
   If the signature does not match, the message MUST be ignored.

   Once the signature has been checked, the receiving host MUST then
   decipher the ct field, using its own private decryption key (PKD). If
   the decipherment fails, the message MUST be ignored.

2.5. SESSION message format

   A SESSION message has the following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------------------------+
                 |          session_number           |
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |   seal_key_len  |     seal_key    |
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |   enc_key_len   |     enc_key     |
                 +-----------------+~~~~~~~~~~~~~~~~~+

   This header is not sent in clear-text. It is first ciphered using the
   public PKE of the target host, then the ciphertext is signed using
   the sender host signature private key (PKS).

   That is, a SESSION message sent over the wire has the following
   format:

                  0      7 8     15 16    23 24    31 
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |      ct_len     |        ct       |
                 +-----------------+~~~~~~~~~~~~~~~~~+
                 |    ct_sig_len   |      ct_sig     |
                 +-----------------+~~~~~~~~~~~~~~~~~+

2.5.1. SESSION message type

   A SESSION message has a type value of 0x04.

2.5.2. SESSION message fields

   The session_number indicates the identifier of the session. Every
   session SHOULD have its own and unique session_number value.

   The seal_key_len field indicates the size of the seal_key field. In
   the current version of this protocol, this should be 32.

   The seal_key field is a seal_key_len bytes long sealing key used for
   message sealing. In the next sections, this key will be referred as
   KS.

   The enc_key_len field indicates the size of the enc_key field. In the
   current version of this protocol, this should be 32.

   The enc_key field is a enc_key_len bytes long encryption key used for
   message cipherment. In the next sections, this key will be referred
   as KE.

   The ct_len field indicates the length of the ct field.
   
   The ct field is the ciphertext, generated using the public encryption
   key (PKE) of the target host.

   The ct_sig_len field indicates the length of the cts field.

   The ct_sig field is the ciphertext signature, generated using the
   private signature key (PKS) of the sender host.

   A host who receives a SESSION message MUST first check if the
   cts signature matches the sending host public verification key (PKV).
   If the signature does not match, the message MUST be ignored.

   Once the signature has been checked, the receiving host MUST then
   decipher the ct field, using its own private decryption key (PKD). If
   the decipherment fails, the message MUST be ignored.

2.6. DATA message format
   
   A DATA message format has the following format:

                  0      7 8     15 16    23 24    31 
                 +-----------------------------------+
                 |      seq_num    |   ct_block_cnt  |
                 +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
                 |             ciphertext            |
                 +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
                 |                hmac               |
                 +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

2.6.1. DATA message type

   A DATA message has a type value of 0x05.

2.6.2. DATA message fields

   The seq_num field indicates the sequence number of the current
   message. Two different DATA messages belonging to the same session
   MUST have two different sequence numbers. The rules governing the
   sequence number are explained in a further section.

   The ct_block_cnt field indicates the size of the ciphertext, in
   blocks. In the current protocol version, a block is 16 bytes long.

   The ciphertext field represents the data of the message, ciphered
   using the target host session cipher key. The initialization vector
   to use for the (de)cipherment operation is computed from the current
   session and sequence numbers. This step is detailed in a further
   section.

   The hmac field contains the first 16 bytes of the HMAC-SHA256 (that
   is, a HMAC-SHA256-128) of the whole DATA message header, excluding
   the field itself, using the remote host session sealing key.

   This field MUST then be 16 bytes long.

   A host who receives a DATA message MUST first check if the hmac
   matches the message. If the HMAC doesn't match, the message MUST be
   ignored.

3. Algorithms

3.1. Sealing

   The used sealing algorithm is HMAC-SHA256-128.

3.2. Symmetric cipherment algorithm

   The used symmetric cipherment algorithm is AES256-CBC with ISO 10126
   padding.

3.3. Asymmetric cipherment and signature algorithms

   The used signature algorithm is RSA with a PKCS#1 v2.1 PSS padding
   (RSASSA_PSS).

   The underlying hash algorithm is SHA256, the MGF method is
   MGF1-SHA256 and the salt length is equal to size of the SHA256
   message digest, that is, 32 bytes.

   The used encryption algorithm is RSA with a PKCS#1 v2.1 RSAES-OAEP
   padding.

   The underlying hash algorithm is SHA1 and the MGF method is
   MGF1-SHA1.

   The use of SHA1 here instead of SHA256 permits the encryption of
   SESSION messages with a RSA key of 1024 bits because of the reduced
   RSA padding size.

   The minimum key size is 1024. The RECOMMENDED key size is 2048.

4. Protocol

4.1. Saying "Hello"

   A host CAN test the protocol support of another host using a request
   HELLO message.

   A host who receives a request HELLO message MAY respond with a
   matching HELLO response message. The response message MUST have the
   same unique_number value.

   If a HELLO response is received that doesn't match with a recently
   send HELLO request, it MUST be ignored.

   The maximum amount of time to wait for a HELLO response is up to the
   implementor. A recommended value is 4 seconds.

   That is, the whole HELLO message functionality is OPTIONAL.

4.2. Presentation

   If two hosts want to communicate but don't "know" each other, they
   CAN send a PRESENTATION message to the remote host to inform them
   about their idendity.

   A host who receives a PRESENTATION message is free to ignore it if
   the presented certificates are not acceptable. Whether a certificate
   is acceptable or not is up to the host.

   A host MAY ignore any PRESENTATION message whose certificate does
   not match a previously sent certificate.

   That is, the whole PRESENTATION message functionality is OPTIONAL.

4.3. Sessions

   When a host wants to establish a session MUST send a SESSION_REQUEST
   message to the target host indicating the last know session number of
   the target host.

   If no previous session exists with the requesting host, the target
   host SHOULD generate new session parameters and reply with a SESSION
   message containing those parameters. The session_number of the new
   session MUST be greater or equal to the requested session_number.

   If a host does not receive a response SESSION message after 3
   seconds, he SHOULD send another SESSION_REQUEST.

   If a host receives more than one request SESSION_REQUEST within 3
   seconds, he MAY only accept the first one and discard the others.

   If a session with the requesting host already exists and is not too
   old (more on that in the next sub-section), the target host MAY
   reply with the parameters from the current session.

   Whenever a session is sent, its associated sequence number MUST be
   reset.

4.3.1 Old sessions

   Every session has a limited lifespan. One host may send a maximum of
   2^16 data messages during a session.
   
   A session is considered old when a host considers too much data
   messages were sent during it. A good value for this "too much" is
   2^15 messages.

   If a host receives a SESSION message with a session_number smaller
   than the last used session_number, it MUST discard the message.

   Note that in any case, the session lifespan is way smaller than the
   AES cipherment and sealing keys lifespan.

   A well designed implementation should however limit session renewals
   to a minimum since key exchange is a critical procedure.

4.4. DATA messages

   Once a host has the session parameters for a target host, he can
   start sending DATA messages to him.

   The sequence number of the first DATA message of a given session MUST
   be 1.

   The next sequence numbers must be greater than any previously used
   sequence number within the same session.

   If a host receives a DATA message with a sequence number lower than
   or equal to a previously received sequence number, he MUST ignore it.

4.4.1. DATA messages initialization vectors

   Each DATA message relies on the session keys and on an initialization
   vector. This initialization vector MUST be unpredictable.
   
   That is, it is computed for each DATA message using a concatenation
   of the current session and sequence numbers. The concatenation MUST
   have the following layout (numbers are in network byte order):

                  0      7 8     15 16    23 24    31 
                 +-----------------------------------+
                 |          session_number           |
                 +-----------------+-----------------+
                 | sequence_number |   must_be_zero  |
                 +-----------------+~~~~~~~~~~~~~~~~~+

   The must_be_zero field is 10 bytes set to 0x00 so that the whole frame
   is 16 bytes long. 

   The concatenation buffer, which is globally unique, is then ciphered
   using the target host encryption key (KE) (in ECB mode, so no
   initialization vector is required).

   The resulting 16 bytes block is the initialization vector to use to
   (de)cipher the DATA message.

5. Thanks

   Thanks to N.Caritey for his precious help regarding the security
   concerns and for his reviews of the present RFC.
